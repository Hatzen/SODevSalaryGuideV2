version: '3'
services:
  postgres-database:
    container_name: db
    image: sodevsalary.env.db:rc2
    build:
      context: ./database
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # always use postgres database
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    # TODO: Port should probably only be exported in dev, otherwise docker can use the internal port.
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./data/database:/var/lib/postgresql/data
    # restart: always

  # https://www.section.io/engineering-education/dockerize-a-rabbitmq-instance/
  rabbitmq3:
    container_name: "rabbitmq"
    image: rabbitmq:3.8-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      # AMQP protocol port
      - "${RABBIT_MQ_PORT}:5672"
      # HTTP management UI
      - "${RABBIT_MQ_ADMIN_UI_PORT}:15672"

  application-http-api:
    container_name: ui-backend
    image: sodevsalary.env.http.api:rc2
    build:
      dockerfile: ./application-http-api/Dockerfile
      context: ../../../
    ports:
      - "8121:8080"
    depends_on:
      - postgres-database
      - rabbitmq3
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB:-postgres}'" ]
      interval: 2s
      timeout: 20s
      retries: 10

  application-http-frontend:
    container_name: ui-frontend
    image: sodevsalary.env.http.frontend:rc2
    build:
      dockerfile: ./application-http-frontend/Dockerfile
      context: ../../../
    ports:
      - "80:8080"

  application-batch-worker-intake:
    image: sodevsalary.env.batch.intake:rc2
    build:
      dockerfile: ./application-batch-worker-intake/Dockerfile
      context: ../../../
    deploy:
      replicas: 3
    # Ports wont be needed
    # ports:
    #  - "9120-9125:8082-8087"
    depends_on:
      - postgres-database
      - rabbitmq3
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB:-postgres}'" ]
      interval: 2s
      timeout: 20s
      retries: 10